#!/usr/bin/env python3
"""
Dana Page Builder - Automatic Setup from PRIVATE_SETUP.md

이 스크립트는 현재 프로젝트 폴더의 PRIVATE_SETUP.md를 파싱하여
Dana Page Builder 환경을 자동으로 구축합니다.

Usage:
    python3 setup_from_private.py
"""

import json
import os
import re
import subprocess
import sys
from pathlib import Path


def print_header():
    """Print setup header"""
    print("\n" + "=" * 50)
    print("🚀 Dana Page Builder - Automatic Setup")
    print("=" * 50 + "\n")


def find_private_setup():
    """Find PRIVATE_SETUP.md in current directory"""
    print("🔍 Checking PRIVATE_SETUP.md...")

    private_setup_path = Path.cwd() / "PRIVATE_SETUP.md"

    if not private_setup_path.exists():
        print("❌ PRIVATE_SETUP.md not found in current directory")
        print(f"   Expected: {private_setup_path}")
        print("\n📝 Please copy PRIVATE_SETUP.md to your project folder:")
        print("   cp /path/to/PRIVATE_SETUP.md .")
        sys.exit(1)

    print(f"✅ Found PRIVATE_SETUP.md")
    return private_setup_path


def extract_service_account_json(content):
    """Extract service account JSON from PRIVATE_SETUP.md"""
    print("\n📋 Parsing PRIVATE_SETUP.md...")

    # Find JSON block between ```json and ```
    pattern = r"```json\s*(\{.*?\})\s*```"
    match = re.search(pattern, content, re.DOTALL)

    if not match:
        print("❌ Failed to extract service account JSON")
        print("   Check PRIVATE_SETUP.md format:")
        print("   ```json")
        print("   {")
        print("     \"type\": \"service_account\",")
        print("     ...")
        print("   }")
        print("   ```")
        sys.exit(1)

    json_str = match.group(1)

    try:
        service_account = json.loads(json_str)
        client_email = service_account.get("client_email", "unknown")
        print(f"   ✓ Service Account: {client_email}")

        # Extract Sheet ID from PRIVATE_SETUP.md
        sheet_id_match = re.search(r"Sheet ID.*?`([a-zA-Z0-9_-]+)`", content)
        if sheet_id_match:
            sheet_id = sheet_id_match.group(1)
            print(f"   ✓ Sheet ID: {sheet_id}")

        return service_account
    except json.JSONDecodeError as e:
        print(f"❌ Invalid JSON format: {e}")
        sys.exit(1)


def create_directories():
    """Create necessary directories"""
    print("\n📁 Creating directories...")

    directories = [
        Path.cwd() / "credentials",
        Path.cwd() / "output"
    ]

    for directory in directories:
        directory.mkdir(exist_ok=True)
        print(f"   ✓ {directory.name}/")

    return directories


def save_service_account(service_account_json):
    """Save service account JSON to credentials/"""
    print("\n📄 Writing files...")

    credentials_path = Path.cwd() / "credentials" / "service-account.json"

    with open(credentials_path, 'w') as f:
        json.dump(service_account_json, f, indent=2)

    print(f"   ✓ credentials/service-account.json")

    return credentials_path


def create_env_file():
    """Create .env file with Dana configuration"""
    env_path = Path.cwd() / ".env"

    env_content = """# Dana Page Builder Configuration
# Auto-generated by setup_from_private.py

GOOGLE_SHEET_ID=1m1f784rij74eSpuHOEOqbAzQu97ZenfLa3QuO-Egjxk
GOOGLE_SERVICE_ACCOUNT_FILE=credentials/service-account.json
FLASK_PORT=5002
FLASK_DEBUG=False
"""

    with open(env_path, 'w') as f:
        f.write(env_content)

    print(f"   ✓ .env")


def install_dependencies():
    """Install Python dependencies"""
    print("\n📦 Installing Python dependencies...")

    dependencies = [
        "gspread",
        "Pillow",
        "jinja2",
        "flask",
        "numpy"
    ]

    for dep in dependencies:
        try:
            print(f"   Installing {dep}... ", end="", flush=True)
            subprocess.run(
                [sys.executable, "-m", "pip", "install", dep],
                check=True,
                capture_output=True,
                text=True
            )
            print("✓")
        except subprocess.CalledProcessError as e:
            print(f"❌\n   Error installing {dep}: {e.stderr}")
            print("   Please install manually: pip3 install " + " ".join(dependencies))
            return False

    return True


def print_success():
    """Print success message with next steps"""
    print("\n" + "=" * 50)
    print("✅ Setup completed successfully!")
    print("=" * 50)

    print("\n📁 Created files in your project folder:")
    print("   - credentials/service-account.json")
    print("   - .env")
    print("   - output/")

    print("\n🎯 Next step:")
    print("   /dana-page-builder:generate DN25FW001")


def main():
    """Main setup flow"""
    try:
        print_header()

        # Step 1: Find PRIVATE_SETUP.md
        private_setup_path = find_private_setup()

        # Step 2: Read content
        with open(private_setup_path, 'r', encoding='utf-8') as f:
            content = f.read()

        # Step 3: Extract service account JSON
        service_account = extract_service_account_json(content)

        # Step 4: Create directories
        create_directories()

        # Step 5: Save files
        save_service_account(service_account)
        create_env_file()

        # Step 6: Install dependencies
        install_dependencies()

        # Step 7: Success
        print_success()

    except KeyboardInterrupt:
        print("\n\n⚠️  Setup cancelled by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n❌ Unexpected error: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()
